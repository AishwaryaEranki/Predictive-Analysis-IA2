# -*- coding: utf-8 -*-
"""LVADSUSR67_Aishwarya_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fQB-ibht_LiLD1c3TXoz5yH-bwF23rMB
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix, silhouette_score, davies_bouldin_score, calinski_harabasz_score
import time
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.cluster import KMeans

data=pd.read_csv('/content/winequality-red.csv')
df=pd.DataFrame(data)
df

df.describe()

df.info()

df.isnull().sum()

df.drop_duplicates()

df['fixed acidity']=df['fixed acidity'].ffill()

df['volatile acidity']=df['volatile acidity'].ffill()
df['citric acid']=df['citric acid'].ffill()
df['residual sugar']=df['residual sugar'].ffill()
df['chlorides']=df['chlorides'].ffill()
df['free sulfur dioxide']=df['free sulfur dioxide'].ffill()
df['total sulfur dioxide']=df['total sulfur dioxide'].ffill()
df['density']=df['density'].ffill()
df['pH']=df['pH'].ffill()
df['sulphates']=df['sulphates'].ffill()
df['alcohol']=df['alcohol'].ffill()
df['quality']=df['quality'].ffill()

df.isnull().sum()

df.corr()

sns.heatmap(df)

x= df.drop(['quality'],axis=1)
x

y=df['quality']
y

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=420)
RF=RandomForestClassifier()
RF.fit(x_train,y_train)
out=RF.predict(x_test)
acc=accuracy_score(y_test,out)
print("Accuracy:",acc)
#pre=precision_score(y_test,out)
#print("Precision:",pre)
#rec=recall_score(y_test,out)
#print("Recall:",rec)